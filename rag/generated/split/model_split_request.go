/*
Text Splitter API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package split

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SplitRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SplitRequest{}

// SplitRequest struct for SplitRequest
type SplitRequest struct {
	Text            []string `json:"text"`
	TargetChunkSize *int32   `json:"target_chunk_size,omitempty"`
	ChunkOverlap    *int32   `json:"chunk_overlap,omitempty"`
	Separators      []string `json:"separators,omitempty"`
	KeepSeparator   *bool    `json:"keep_separator,omitempty"`
}

type _SplitRequest SplitRequest

// NewSplitRequest instantiates a new SplitRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplitRequest(text []string) *SplitRequest {
	this := SplitRequest{}
	this.Text = text
	var targetChunkSize int32 = 512
	this.TargetChunkSize = &targetChunkSize
	var chunkOverlap int32 = 53
	this.ChunkOverlap = &chunkOverlap
	var keepSeparator bool = false
	this.KeepSeparator = &keepSeparator
	return &this
}

// NewSplitRequestWithDefaults instantiates a new SplitRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplitRequestWithDefaults() *SplitRequest {
	this := SplitRequest{}
	var targetChunkSize int32 = 512
	this.TargetChunkSize = &targetChunkSize
	var chunkOverlap int32 = 53
	this.ChunkOverlap = &chunkOverlap
	var keepSeparator bool = false
	this.KeepSeparator = &keepSeparator
	return &this
}

// GetText returns the Text field value
func (o *SplitRequest) GetText() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *SplitRequest) GetTextOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text, true
}

// SetText sets field value
func (o *SplitRequest) SetText(v []string) {
	o.Text = v
}

// GetTargetChunkSize returns the TargetChunkSize field value if set, zero value otherwise.
func (o *SplitRequest) GetTargetChunkSize() int32 {
	if o == nil || IsNil(o.TargetChunkSize) {
		var ret int32
		return ret
	}
	return *o.TargetChunkSize
}

// GetTargetChunkSizeOk returns a tuple with the TargetChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitRequest) GetTargetChunkSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.TargetChunkSize) {
		return nil, false
	}
	return o.TargetChunkSize, true
}

// HasTargetChunkSize returns a boolean if a field has been set.
func (o *SplitRequest) HasTargetChunkSize() bool {
	if o != nil && !IsNil(o.TargetChunkSize) {
		return true
	}

	return false
}

// SetTargetChunkSize gets a reference to the given int32 and assigns it to the TargetChunkSize field.
func (o *SplitRequest) SetTargetChunkSize(v int32) {
	o.TargetChunkSize = &v
}

// GetChunkOverlap returns the ChunkOverlap field value if set, zero value otherwise.
func (o *SplitRequest) GetChunkOverlap() int32 {
	if o == nil || IsNil(o.ChunkOverlap) {
		var ret int32
		return ret
	}
	return *o.ChunkOverlap
}

// GetChunkOverlapOk returns a tuple with the ChunkOverlap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitRequest) GetChunkOverlapOk() (*int32, bool) {
	if o == nil || IsNil(o.ChunkOverlap) {
		return nil, false
	}
	return o.ChunkOverlap, true
}

// HasChunkOverlap returns a boolean if a field has been set.
func (o *SplitRequest) HasChunkOverlap() bool {
	if o != nil && !IsNil(o.ChunkOverlap) {
		return true
	}

	return false
}

// SetChunkOverlap gets a reference to the given int32 and assigns it to the ChunkOverlap field.
func (o *SplitRequest) SetChunkOverlap(v int32) {
	o.ChunkOverlap = &v
}

// GetSeparators returns the Separators field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SplitRequest) GetSeparators() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Separators
}

// GetSeparatorsOk returns a tuple with the Separators field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SplitRequest) GetSeparatorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Separators) {
		return nil, false
	}
	return o.Separators, true
}

// HasSeparators returns a boolean if a field has been set.
func (o *SplitRequest) HasSeparators() bool {
	if o != nil && !IsNil(o.Separators) {
		return true
	}

	return false
}

// SetSeparators gets a reference to the given []string and assigns it to the Separators field.
func (o *SplitRequest) SetSeparators(v []string) {
	o.Separators = v
}

// GetKeepSeparator returns the KeepSeparator field value if set, zero value otherwise.
func (o *SplitRequest) GetKeepSeparator() bool {
	if o == nil || IsNil(o.KeepSeparator) {
		var ret bool
		return ret
	}
	return *o.KeepSeparator
}

// GetKeepSeparatorOk returns a tuple with the KeepSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitRequest) GetKeepSeparatorOk() (*bool, bool) {
	if o == nil || IsNil(o.KeepSeparator) {
		return nil, false
	}
	return o.KeepSeparator, true
}

// HasKeepSeparator returns a boolean if a field has been set.
func (o *SplitRequest) HasKeepSeparator() bool {
	if o != nil && !IsNil(o.KeepSeparator) {
		return true
	}

	return false
}

// SetKeepSeparator gets a reference to the given bool and assigns it to the KeepSeparator field.
func (o *SplitRequest) SetKeepSeparator(v bool) {
	o.KeepSeparator = &v
}

func (o SplitRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SplitRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	if !IsNil(o.TargetChunkSize) {
		toSerialize["target_chunk_size"] = o.TargetChunkSize
	}
	if !IsNil(o.ChunkOverlap) {
		toSerialize["chunk_overlap"] = o.ChunkOverlap
	}
	if o.Separators != nil {
		toSerialize["separators"] = o.Separators
	}
	if !IsNil(o.KeepSeparator) {
		toSerialize["keep_separator"] = o.KeepSeparator
	}
	return toSerialize, nil
}

func (o *SplitRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSplitRequest := _SplitRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSplitRequest)

	if err != nil {
		return err
	}

	*o = SplitRequest(varSplitRequest)

	return err
}

type NullableSplitRequest struct {
	value *SplitRequest
	isSet bool
}

func (v NullableSplitRequest) Get() *SplitRequest {
	return v.value
}

func (v *NullableSplitRequest) Set(val *SplitRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSplitRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSplitRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplitRequest(val *SplitRequest) *NullableSplitRequest {
	return &NullableSplitRequest{value: val, isSet: true}
}

func (v NullableSplitRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplitRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
